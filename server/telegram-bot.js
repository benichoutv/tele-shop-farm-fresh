import 'dotenv/config';
import TelegramBot from 'node-telegram-bot-api';
import { getDb } from './db/connection.js';
import { initDatabase } from './db/init.js';

// Fonction principale asynchrone
async function main() {
  const token = process.env.TELEGRAM_BOT_TOKEN;
  const appUrl = process.env.APP_BASE_URL;

  if (!token) {
    console.error('‚ùå TELEGRAM_BOT_TOKEN manquant dans .env');
    console.error('üìù Ajoute TELEGRAM_BOT_TOKEN=ton_token dans le fichier .env');
    process.exit(1);
  }

  if (!appUrl) {
    console.error('‚ùå APP_BASE_URL manquant dans .env');
    console.error('üìù Ajoute APP_BASE_URL=https://ton-domaine.com dans le fichier .env');
    process.exit(1);
  }

  // Afficher la configuration DB
  const dbType = process.env.DB_TYPE || 'sqlite';
  const dbPath = process.env.DB_PATH || 'database.sqlite';
  console.log(`üóÑÔ∏è Base de donn√©es: ${dbType} (${dbType === 'sqlite' ? dbPath : 'PostgreSQL'})`);

  // Initialiser la base de donn√©es (cr√©er les tables si n√©cessaire)
  try {
    await initDatabase();
    console.log('‚úÖ Base de donn√©es initialis√©e avec succ√®s');
  } catch (error) {
    console.error('‚ùå Erreur lors de l\'initialisation de la base de donn√©es:', error);
    process.exit(1);
  }

  // Cr√©er le bot en mode polling (√©coute active)
  const bot = new TelegramBot(token, { polling: true });

  console.log('‚úÖ Bot RS-Liv d√©marr√© avec succ√®s');
  console.log(`üì± URL de la mini-app : ${appUrl}`);

  // V√©rification de l'admin
  const ADMIN_ID = parseInt(process.env.TELEGRAM_ADMIN_ID) || 0;
  if (ADMIN_ID) {
    console.log(`üë§ Admin ID configur√©: ${ADMIN_ID}`);
  } else {
    console.warn('‚ö†Ô∏è TELEGRAM_ADMIN_ID non configur√© - les commandes admin ne fonctionneront pas');
  }

  function isAdmin(userId) {
    return ADMIN_ID !== 0 && userId === ADMIN_ID;
  }

  // R√©pondre √† la commande /start
  bot.onText(/\/start/, async (msg) => {
    const chatId = msg.chat.id;
    const firstName = msg.from.first_name || '';
    
    // Clavier par d√©faut avec seulement le bouton principal
    const defaultKeyboard = [
      [{ text: 'üõí Ouvrir RSliv', web_app: { url: appUrl } }]
    ];
    
    try {
      // R√©cup√©rer les boutons personnalis√©s depuis la base de donn√©es
      const db = await getDb();
      const buttons = await db.all('SELECT * FROM bot_buttons ORDER BY position ASC');
      
      // Construire le clavier inline
      const keyboard = [
        // Premi√®re ligne : bouton principal (web_app)
        [{ text: 'üõí Ouvrir RSliv', web_app: { url: appUrl } }]
      ];
      
      // Ajouter les boutons personnalis√©s (1 par ligne)
      buttons.forEach(btn => {
        keyboard.push([{
          text: `${btn.emoji} ${btn.name}`,
          url: btn.url
        }]);
      });
      
      await bot.sendMessage(
        chatId,
        `üëã Bonjour ${firstName} ! Bienvenue sur le bot officiel RSliv üî•üçì\n\nüì± Ici, tu trouveras toutes nos infos, Livraison, actus et offres sp√©ciales.\n\n‚è∞ Utilise /start pour afficher notre menu et passer commande facilement.\n\nüè† Merci de faire confiance √† RsLiv ‚Äî Service rapide, discret & s√©curis√©.`,
        {
          reply_markup: { inline_keyboard: keyboard }
        }
      );
      console.log(`‚úÖ Commande /start envoy√©e √† ${msg.from.username || chatId} (${buttons.length} boutons personnalis√©s)`);
    } catch (error) {
      console.error('‚ùå Erreur lors de l\'envoi du message /start:', error);
      // Fallback: afficher au moins le bouton principal
      try {
        await bot.sendMessage(
          chatId,
          `üëã Bonjour ${firstName} ! Bienvenue sur le bot officiel RSliv üî•üçì\n\nüì± Ici, tu trouveras toutes nos infos, Livraison, actus et offres sp√©ciales.\n\n‚è∞ Utilise /start pour afficher notre menu et passer commande facilement.\n\nüè† Merci de faire confiance √† RsLiv ‚Äî Service rapide, discret & s√©curis√©.`,
          {
            reply_markup: { inline_keyboard: defaultKeyboard }
          }
        );
        console.log(`‚ö†Ô∏è Commande /start envoy√©e en mode fallback √† ${msg.from.username || chatId}`);
      } catch (fallbackError) {
        console.error('‚ùå Erreur critique lors du fallback /start:', fallbackError);
      }
    }
  });

  // Commande /help
  bot.onText(/\/help/, async (msg) => {
  const chatId = msg.chat.id;
  const userId = msg.from.id;
  
  if (!isAdmin(userId)) {
    await bot.sendMessage(chatId, 'üí° Utilise /start pour acc√©der au menu RSliv.');
    return;
  }
  
  const helpMessage = `
üîß *Commandes Admin RS-Liv Bot*

üìã *Gestion des boutons de contact :*

‚Ä¢ \`/addbutton\` - Ajouter un nouveau bouton
  Format : Nom | Emoji | URL
  
‚Ä¢ \`/listbuttons\` - Afficher tous les boutons configur√©s
  
‚Ä¢ \`/removebutton ID\` - Supprimer un bouton par son ID
  
‚Ä¢ \`/start\` - Aper√ßu du message utilisateur

*Exemple d'ajout :*
1Ô∏è‚É£ Envoie \`/addbutton\`
2Ô∏è‚É£ R√©ponds : \`WhatsApp Support | üí¨ | https://wa.me/33612345678\`
3Ô∏è‚É£ Le bouton appara√Æt imm√©diatement dans /start
  `;
  
    await bot.sendMessage(chatId, helpMessage, { parse_mode: 'Markdown' });
  });

  // Commande /addbutton
  bot.onText(/\/addbutton/, async (msg) => {
  const chatId = msg.chat.id;
  const userId = msg.from.id;
  
  if (!isAdmin(userId)) {
    await bot.sendMessage(chatId, '‚ùå Cette commande est r√©serv√©e √† l\'administrateur.');
    return;
  }
  
  await bot.sendMessage(
    chatId,
    'üìù Pour ajouter un bouton, r√©ponds avec le format suivant :\n\n' +
    '`Nom | Emoji | URL`\n\n' +
    '*Exemple :*\n' +
    '`WhatsApp Support | üí¨ | https://wa.me/33612345678`\n\n' +
    'Ou envoie "annuler" pour abandonner.',
    { parse_mode: 'Markdown' }
  );
  
  // Cr√©er un listener temporaire pour la r√©ponse
  const responseHandler = async (response) => {
    // Ignorer si c'est un autre utilisateur ou une commande
    if (response.from.id !== userId || !response.text) return;
    if (response.text.startsWith('/')) {
      bot.removeListener('message', responseHandler);
      return;
    }
    
    const text = response.text.trim();
    
    if (text.toLowerCase() === 'annuler') {
      await bot.sendMessage(chatId, '‚ùå Ajout de bouton annul√©.');
      bot.removeListener('message', responseHandler);
      return;
    }
    
    const parts = text.split('|').map(s => s.trim());
    
    if (parts.length !== 3) {
      await bot.sendMessage(
        chatId, 
        '‚ùå Format invalide. Utilise : `Nom | Emoji | URL`\n\nOu envoie "annuler" pour abandonner.',
        { parse_mode: 'Markdown' }
      );
      return;
    }
    
    const [name, emoji, url] = parts;
    
    // Validation basique de l'URL
    if (!url.startsWith('http://') && !url.startsWith('https://')) {
      await bot.sendMessage(chatId, '‚ùå L\'URL doit commencer par http:// ou https://');
      return;
    }
    
    try {
      const db = await getDb();
      const maxPos = await db.get('SELECT MAX(position) as max FROM bot_buttons');
      const position = (maxPos?.max || 0) + 1;
      
      await db.run(
        'INSERT INTO bot_buttons (name, emoji, url, position) VALUES (?, ?, ?, ?)',
        [name, emoji, url, position]
      );
      
      await bot.sendMessage(chatId, `‚úÖ Bouton "${emoji} ${name}" ajout√© avec succ√®s !\n\nUtilise /start pour voir le r√©sultat.`);
      console.log(`‚úÖ Bouton ajout√© par admin ${userId}: ${emoji} ${name}`);
      
      // Nettoyer le listener
      bot.removeListener('message', responseHandler);
    } catch (error) {
      console.error('‚ùå Erreur ajout bouton:', error);
      await bot.sendMessage(chatId, '‚ùå Erreur lors de l\'ajout du bouton. V√©rifie les logs.');
      bot.removeListener('message', responseHandler);
    }
  };
  
  bot.on('message', responseHandler);
  
    // Auto-nettoyage apr√®s 2 minutes
    setTimeout(() => {
      bot.removeListener('message', responseHandler);
    }, 120000);
  });

  // Commande /listbuttons
  bot.onText(/\/listbuttons/, async (msg) => {
  const chatId = msg.chat.id;
  const userId = msg.from.id;
  
  if (!isAdmin(userId)) {
    await bot.sendMessage(chatId, '‚ùå Cette commande est r√©serv√©e √† l\'administrateur.');
    return;
  }
  
  try {
    const db = await getDb();
    const buttons = await db.all('SELECT * FROM bot_buttons ORDER BY position ASC');
    
    if (buttons.length === 0) {
      await bot.sendMessage(
        chatId, 
        'üìã Aucun bouton configur√© pour le moment.\n\nUtilise /addbutton pour en ajouter un.'
      );
      return;
    }
    
    let message = `üìã *Boutons configur√©s (${buttons.length}) :*\n\n`;
    
    buttons.forEach((btn, index) => {
      message += `*${index + 1}Ô∏è‚É£ ${btn.emoji} ${btn.name}*\n`;
      message += `   URL: ${btn.url}\n`;
      message += `   ID: \`${btn.id}\`\n\n`;
    });
    
    message += '\nüí° Pour supprimer un bouton : `/removebutton ID`\n';
    message += 'Exemple : `/removebutton 1`';
    
    await bot.sendMessage(chatId, message, { parse_mode: 'Markdown' });
    } catch (error) {
      console.error('‚ùå Erreur listbuttons:', error);
      await bot.sendMessage(chatId, '‚ùå Erreur lors de la r√©cup√©ration des boutons.');
    }
  });

  // Commande /removebutton
  bot.onText(/\/removebutton (.+)/, async (msg, match) => {
  const chatId = msg.chat.id;
  const userId = msg.from.id;
  
  if (!isAdmin(userId)) {
    await bot.sendMessage(chatId, '‚ùå Cette commande est r√©serv√©e √† l\'administrateur.');
    return;
  }
  
  const buttonId = parseInt(match[1]);
  
  if (isNaN(buttonId)) {
    await bot.sendMessage(
      chatId, 
      '‚ùå ID invalide. Utilise `/removebutton ID`\n\nExemple : `/removebutton 1`',
      { parse_mode: 'Markdown' }
    );
    return;
  }
  
  try {
    const db = await getDb();
    const button = await db.get('SELECT * FROM bot_buttons WHERE id = ?', [buttonId]);
    
    if (!button) {
      await bot.sendMessage(chatId, `‚ùå Aucun bouton trouv√© avec l'ID ${buttonId}.\n\nUtilise /listbuttons pour voir les IDs disponibles.`);
      return;
    }
    
    await db.run('DELETE FROM bot_buttons WHERE id = ?', [buttonId]);
    await bot.sendMessage(
      chatId, 
      `‚úÖ Bouton #${buttonId} "${button.emoji} ${button.name}" supprim√© avec succ√®s !\n\nUtilise /start pour voir le r√©sultat.`
    );
    console.log(`‚úÖ Bouton supprim√© par admin ${userId}: ${button.emoji} ${button.name}`);
    } catch (error) {
      console.error('‚ùå Erreur removebutton:', error);
      await bot.sendMessage(chatId, '‚ùå Erreur lors de la suppression du bouton.');
    }
  });

  // R√©pondre aux messages texte (autres que commandes)
  bot.on('message', async (msg) => {
    // Ignorer toutes les commandes (d√©j√† g√©r√©es par onText)
    if (msg.text && msg.text.startsWith('/')) return;
    
    // Ignorer les m√©dias
    if (!msg.text) return;
    
    const chatId = msg.chat.id;
    const userId = msg.from.id;
    
    try {
      // Message diff√©rent selon si c'est l'admin ou un utilisateur
      if (isAdmin(userId)) {
        await bot.sendMessage(chatId, 'üí° Utilise /help pour voir les commandes admin.');
      } else {
        await bot.sendMessage(chatId, 'üí° Utilise /start pour afficher notre menu et passer commande facilement.');
      }
      console.log(`‚ÑπÔ∏è Message d'aide envoy√© √† ${msg.from.username || chatId}`);
    } catch (error) {
      console.error('‚ùå Erreur lors de l\'envoi du message d\'aide:', error);
    }
  });

  // G√©rer les erreurs de polling
  bot.on('polling_error', (error) => {
    console.error('‚ùå Erreur de polling:', error.code, error.message);
  });

  // Arr√™t propre du bot
  process.on('SIGINT', () => {
    console.log('\n‚èπÔ∏è Arr√™t du bot...');
    bot.stopPolling();
    process.exit(0);
  });

  process.on('SIGTERM', () => {
    console.log('\n‚èπÔ∏è Arr√™t du bot...');
    bot.stopPolling();
    process.exit(0);
  });
}

// D√©marrer le bot
main().catch(error => {
  console.error('‚ùå Erreur fatale lors du d√©marrage du bot:', error);
  process.exit(1);
});
